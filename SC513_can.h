//////////////////////////////////////////////////////////////////////////  
///    COPYRIGHT NOTICE  
///    Copyright (c) 2015,513  
///    All rights reserved.  
///  
/// @file   SC513_can.h
/// @brief  CAN总线驱动头文件
///         
///  
///  
///  
///  
/// @version 1.00
/// @author  gengzh
/// @date    2023/10/24
///  
///  修订说明：最初版本 
//////////////////////////////////////////////////////////////////////////
#ifndef _SC513_CAN_H_
#define _SC513_CAN_H_
#ifdef __cplusplus
extern "C"{
#endif

#include "gtypes.h"


#define CAN_SPEED_125K 0x01
#define CAN_SPEED_250K 0x02
#define CAN_SPEED_500K 0x04
#define CAN_SPEED_1M   0x08

typedef enum can_mode_t
	{
		CAN_MODE_NORMAL = 0x00,
		CAN_MODE_LISTEN_ONLY = 0x02,
		CAN_SW_RESET = 0x01
	} can_mode_t;

typedef struct {
	UINT32 addr;		//填入本帧数据的扩展帧标识符（29bit），采用左对齐填入 3 位 0
	UINT8 data[8];		//用于填入 CAN 传送帧单帧数据场的 8 字节数据，当数据帧数据域内容不足 8 字节时，高位数组元素填入 0x00
	UINT8 data_len;		//表示 data[8]内有效的数据长度
}can_frame_t;


typedef struct{
	UINT8 BusStatus;	//硬件状态寄存器数值
	UINT8 BusCmd;		//CAN 控制器设置寄存器数值
	UINT8 RxErr;		//接收错误计数寄存器数值
	UINT8 TxErr;		//发送错误计数寄存器数值
}can_status_t;

/*******************************************************************************************
*  函数功能: 初始化指定通道的 CAN 总线，对 CAN 控制器进行复位并完成默认的总线状态配置
*  @idea 配置状态如下：	
*		1) 设置总线波特率 500kbps
*		2) 设置 CAN 总线工作模式为正常工作模式
*		3) 设置 ACR 寄存器 0x00000000
*		4) 设置 AMR 寄存器 0xFFFFFFFF
*  @param chan 表示 CAN 通道序号，0 代表 A 通道，1 代表 B 通道
*  @return ret:	
*		1) 0：函数调用成功；
*		2) -1：其他原因调用函数失败；
*		3) -2：CAN 控制器复位失败；
*		4) -3：CAN 控制器波特率设置失败；
*		5) -4：CAN 控制器接收滤波设置失败。
*  @see 无
*  @note 无
********************************************************************************************/
extern INT32 can_init (UINT32 chan);


/*******************************************************************************************
*  函数功能: 单独设置指定通道的波特率，通常情况下初始化函数已经完成了波特率设置
*  @idea 本函数提供单独的波特率设置方法
*  @param chan： 表示 CAN 通道序号，0 代表 A 通道，1 代表 B 通道
*  @param bitrate： CAN_SPEED_125K 表示通信速率 125K
*					CAN_SPEED_250K 表示通信速率 250K
*					CAN_SPEED_500K 表示通信速率 500K
*					CAN_SPEED_1M   表示通信速率 1M
*  @return ret:		0：函数调用成功  -1：函数调用失败。
*  @see 无
*  @note 波特率配置需要更改两个寄存器数值，因此底层根据数值常量做寄存器数值的映射
********************************************************************************************/
extern INT32 can_set_bitrate(UINT32 chan, UINT32 bitrate);


/*******************************************************************************************
*  函数功能: 单独设置指定通道的总线工作模式，通常情况下初始化函数已经完成了工作模式设置			 
*  @idea 本函数提供单独的工作模式设置方法
*  @param chan：表示 CAN 通道序号，0 代表 A 通道，1 代表 B 通道
*  @param mode：枚举型，需要设置的工作模式
*					CAN_MODE_NORMAL			表示正常工作模式
*					CAN_MODE_LISTEN_ONLY	表示只听工作模式
*					CAN_SW_RESET			表示复位工作模式
*  @return ret:		0：函数调用成功  -1：函数调用失败。
*  @see 无
*  @note 枚举值可以直接写入 SJ1000 工作模式寄存器
********************************************************************************************/
extern INT32 can_set_mode(UINT32 chan, UINT8 mode);


/*******************************************************************************************
*  函数功能: 单独设置指定通道的总线滤波，通常情况下初始化函数已经完成了滤波设置			 
*  @idea 本函数提供单独的滤波设置方法
*  @param chan： 表示 CAN 通道序号，0 代表 A 通道，1 代表 B 通道
*  @param filterMode：使用宏定义,表示需要配置的过滤模式
*					SINGLE_FILTER_MODE		表示单过滤模式
*					DOUBLE_FILTER_MODE		表示双过滤模式
*  @param AMR： 接收屏蔽寄存器写入数值,从高到底分别代表 AMR0、AMR1、AMR2及 AMR3 四个寄存器的具体写入数值，每个寄存器 8 位
*  @param ACR： 接收代码寄存器写入数值,从高到底分别代表 ACR0、ACR1、ACR2及 ACR3 四个寄存器的具体写入数值，每个寄存器 8 位
*  @return ret:	0：函数调用成功  -1：函数调用失败。
*  @see 无
*  @note 枚举值可以直接写入 SJ1000 工作模式寄存器
********************************************************************************************/
extern INT32 can_set_filter(UINT32 chan, UINT32 filterMode, UINT32 AMR, UINT32 ACR);


/*******************************************************************************************
*  函数功能: 接收CAN总线数据			 
*  @idea 无
*  @param chan： 表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @param filterMode：使用宏定义,表示待接收的CAN帧数据地址
*  @return ret:	0：函数调用成功  -1：其他原因导致的调用失败 -2：本通道未初始化
*  @see 无
*  @note 应用层完成复帧数据的帧定义，底层只负责接收单帧数据，接收时，data_len 写入实际收到的字节数
********************************************************************************************/
extern INT32 can_recv(UINT32 chan, can_frame_t* frame);

/*******************************************************************************************
*  函数功能: 发送CAN总线数据			 
*  @idea 无
*  @param chan： 表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @param can_frame_t：使用宏定义,表示待发送的CAN帧数据地址
*  @return ret:	0：函数调用成功  
*				-1：其他原因导致的调用失败 
*				-2：本通道未初始化
*				-3：结构体长度大于 8
*				-4：缓存不足
*  @see 无
*  @note 应用层完成复帧数据的帧定义，底层只负责发送单帧数据，发送时，data_len 写入实际发送的字节数
********************************************************************************************/
extern INT32 can_send(UINT32 chan, can_frame_t* frame);


/*******************************************************************************************
*  函数功能: 获取CAN总线接收FIFO状态			 
*  @idea 无
*  @param chan：表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @param Fifo_len:接收 FIFO 已经使用的字节数
*  @return ret:	0：函数调用成功  
*				-1：函数调用失败 
*  @see 无
*  @note 无
********************************************************************************************/
extern INT32 can_get_rx_fifo_status(UINT32 chan, UINT32* Fifo_len);

/*******************************************************************************************
*  函数功能: 获取CAN总线发送FIFO状态			 
*  @idea 无
*  @param chan：表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @param Fifo_len:发送FIFO已经使用的字节数
*  @return ret:	0：函数调用成功  
*				-1：函数调用失败 
*  @see 无
*  @note 无
********************************************************************************************/
extern INT32 can_get_tx_fifo_status(UINT32 chan, UINT32* Fifo_len);


/*******************************************************************************************
*  函数功能: 获取CAN总线相关寄存器状态			 
*  @idea 无
*  @param chan：表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @param status:表示需要从总线芯片上获取的寄存器数值
*  @return ret:	0：函数调用成功  
*				-1：函数调用失败 
*  @see 无
*  @note 无
********************************************************************************************/
extern INT32 can_get_status(UINT32 chan, can_status_t* status);

extern INT32 can_clearInt(UINT32 chan);

/*******************************************************************************************
*  函数功能: 关闭CAN总线			 
*  @idea 无
*  @param chan：表示 CAN 通道序号，0 代表 A通道，1 代表 B通道
*  @return ret:	0：函数调用成功  
*				-1：函数调用失败 
*  @see 无
*  @note 无
********************************************************************************************/
extern INT32 can_close(UINT32 chan);


#ifdef __cplusplus
}
#endif
#endif 
